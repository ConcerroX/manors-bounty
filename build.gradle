//file:noinspection GroovyAssignabilityCheck
plugins {
    id "java-library"
    id "maven-publish"
    id "net.neoforged.moddev" version "2.0.94"
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
    id "idea"
}

tasks.named("wrapper", Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    accessTransformers = project.files("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            client()
            systemProperty "neoforge.enabledGameTestNamespaces", mod_id
        }
        server {
            server()
            programArgument "--nogui"
            systemProperty "neoforge.enabledGameTestNamespaces", mod_id
        }
        gameTestServer {
            type = "gameTestServer"
            systemProperty "neoforge.enabledGameTestNamespaces", mod_id
        }
        data {
            data()
            programArguments.addAll "--mod", mod_id, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources/").getAbsolutePath()
        }
        configureEach {
            systemProperty "forge.logging.markers", "REGISTRIES"
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDirs("src/generated/resources") }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()
    maven { url "https://thedarkcolour.github.io/KotlinForForge/" }
    maven { url "https://cursemaven.com/" }
    maven { url "https://maven.createmod.net/" }
    maven { url "https://mvn.devos.one/snapshots/" }
    maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
    implementation "thedarkcolour:kotlinforforge-neoforge:5.5.0" // Kotlin for Forge
    implementation "curse.maven:farmers-delight-398521:6597295" // Farmer's Delight
    localRuntime "curse.maven:lmft-656346:5425796" // Load My F***ing Tags
    localRuntime "curse.maven:tmrv-1194921:6649213" // TMRV
    localRuntime "curse.maven:jade-324717:6291517" // Jade

    implementation("com.simibubi.create:create-1.21.1:6.0.6-98:slim") { transitive = false } // Create
    localRuntime "dev.engine-room.flywheel:flywheel-neoforge-1.21.1:1.0.4-27" // Flywheel
    localRuntime "net.createmod.ponder:Ponder-NeoForge-1.21.1:1.0.58" // Ponder
    localRuntime "com.tterrag.registrate:Registrate:MC1.21-1.3.0+62" // Registrate

    compileOnly "dev.emi:emi-neoforge:1.1.22+1.21.1:api" // EMI API
    runtimeOnly "dev.emi:emi-neoforge:1.1.22+1.21.1" // EMI
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties
    filesMatching(["META-INF/neoforge.mods.toml"]) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
